{
  "address": "0xaAb3c4d32BA924c61A8Ce2ca12164CD1A7520c46",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_VRFCoordinator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_linkToken",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[7]",
          "name": "random_numbers",
          "type": "uint256[7]"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "LINK_token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_SUPPLY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "_setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "randomness",
          "type": "uint256"
        }
      ],
      "name": "rawFulfillRandomness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "remainingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleIsActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawLink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd939beeed32139e0cb8afb7af18d41c1943014009c0acb6bf849e9b807017343",
  "receipt": {
    "to": null,
    "from": "0xbEd01a63f88421449DDE4d9E1D884D3E3D213F01",
    "contractAddress": "0xaAb3c4d32BA924c61A8Ce2ca12164CD1A7520c46",
    "transactionIndex": 42,
    "gasUsed": "4374233",
    "logsBloom": "0x
    "blockHash": "0x0e9e2877470b6f9a6b5e871f76d441ce13a7d9a58b8a650ae2f8bacb93306a97",
    "transactionHash": "0xd939beeed32139e0cb8afb7af18d41c1943014009c0acb6bf849e9b807017343",
    "logs": [
      {
        "transactionIndex": 42,
        "blockNumber": 9701726,
        "transactionHash": "0xd939beeed32139e0cb8afb7af18d41c1943014009c0acb6bf849e9b807017343",
        "address": "0xaAb3c4d32BA924c61A8Ce2ca12164CD1A7520c46",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bed01a63f88421449dde4d9e1d884d3e3d213f01"
        ],
        "data": "0x",
        "logIndex": 87,
        "blockHash": "0x0e9e2877470b6f9a6b5e871f76d441ce13a7d9a58b8a650ae2f8bacb93306a97"
      }
    ],
    "blockNumber": 9701726,
    "cumulativeGasUsed": "11202294",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb3dCcb4Cf7a26f6cf6B120Cf5A73875B7BBc655B",
    "0x01be23585060835e02b77ef475b0cc51aa1e0709",
    "0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311"
  ],
  "solcInputHash": "55d7cf22d6d714d6c5083f76e08143a9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_VRFCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_linkToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[7]\",\"name\":\"random_numbers\",\"type\":\"uint256[7]\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LINK_token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"_setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim()\":{\"notice\":\"Requests random number from Chainlink VRF function\"},\"remainingSupply()\":{\"notice\":\"NFT Helper Functions\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CovidCats.sol\":\"CovidCats\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(\\n    bytes32 requestId,\\n    uint256 randomness\\n  )\\n    internal\\n    virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 constant private USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(\\n    bytes32 _keyHash,\\n    uint256 _fee\\n  )\\n    internal\\n    returns (\\n      bytes32 requestId\\n    )\\n  {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface immutable internal LINK;\\n  address immutable private vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(\\n    address _vrfCoordinator,\\n    address _link\\n  ) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(\\n    bytes32 requestId,\\n    uint256 randomness\\n  )\\n    external\\n  {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\",\"keccak256\":\"0x991e49ee47043d6667887d7ed6ab5a0f8e4e5550f92b09b0d75c1fb1a473cd8d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  )\\n    internal\\n    pure\\n    returns (\\n      uint256\\n    )\\n  {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(\\n    bytes32 _keyHash,\\n    uint256 _vRFInputSeed\\n  )\\n    internal\\n    pure\\n    returns (\\n      bytes32\\n    )\\n  {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\",\"keccak256\":\"0x7c8dad07e6c6c9269d97fd1191ccf9c0f0068683f1f88003e688eef9373de0d9\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 remaining\\n    );\\n\\n  function approve(\\n    address spender,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function balanceOf(\\n    address owner\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 balance\\n    );\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8 decimalPlaces\\n    );\\n\\n  function decreaseApproval(\\n    address spender,\\n    uint256 addedValue\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function increaseApproval(\\n    address spender,\\n    uint256 subtractedValue\\n  ) external;\\n\\n  function name()\\n    external\\n    view\\n    returns (\\n      string memory tokenName\\n    );\\n\\n  function symbol()\\n    external\\n    view\\n    returns (\\n      string memory tokenSymbol\\n    );\\n\\n  function totalSupply()\\n    external\\n    view\\n    returns (\\n      uint256 totalTokensIssued\\n    );\\n\\n  function transfer(\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n}\\n\",\"keccak256\":\"0x50528c237386c55ff122d047f91b32be7abe24e9dfdc609de21cd605aae83b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/CovidCats.sol\":{\"content\":\"/** TO-DO\\n * \\n * Determine how to store metadata in a format that OpenSea will accept\\n */\\n\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract CovidCats is ERC721, VRFConsumerBase, Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using Counters for Counters.Counter;\\n    \\n    // NFT CONSTANTS\\n    Counters.Counter private _tokenSupply;\\n    uint256 public constant MAX_SUPPLY = 10000;\\n    uint256 public constant MINT_PRICE = 0.1 ether;\\n\\n    bool public saleIsActive = false;\\n\\n    mapping (uint256 => string) private _tokenURIs;\\n    string private _baseTokenURI;\\n    \\n    event Mint(address indexed _minter, uint256 indexed _tokenID, uint256[7] random_numbers);\\n\\n    // DECLARING CHAINLINK VRF FUNCTION CONSTANTS\\n    bytes32 internal keyHash; //Public key against which randomness is generated\\n    uint256 internal fee; //Fee required to fulfil a VRF request\\n    mapping(bytes32 => address) requestToSender;\\n    mapping(address => bool) isClaiming;\\n    IERC20 public LINK_token;\\n    \\n    constructor( address _VRFCoordinator, address _linkToken, bytes32 _keyHash)\\n        VRFConsumerBase(_VRFCoordinator, _linkToken)\\n        ERC721(\\\"CovidCats\\\", \\\"CovidCat\\\")\\n        Ownable() {\\n            LINK_token = IERC20(_linkToken);\\n            keyHash = _keyHash;\\n            fee = 0.1 * 10 ** 18;\\n    }\\n\\n    /** \\n     * NFT Helper Functions\\n     */\\n\\n    // I wonder how many JPEGs are left?\\n    function remainingSupply() public view returns (uint256) {\\n        return MAX_SUPPLY - _tokenSupply.current();\\n    }\\n\\n    // I wonder how many JPEGs are minted?\\n    function tokenSupply() public view returns (uint256) {\\n        return _tokenSupply.current();\\n    }\\n\\n    // All the functions you don't really care about but need to be here\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n        \\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        \\n        // // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n        \\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\n        // return string(abi.encodePacked(base, tokenId.toString()));\\n        return _baseTokenURI;\\n    }\\n\\n    function setBaseURI(string memory baseURI) external onlyOwner {\\n        _baseTokenURI = baseURI;\\n    }\\n\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) external {\\n        require(owner() == msg.sender || ownerOf(tokenId) == msg.sender, \\\"Only the contract owner or NFT owner can set the tokenURI\\\");\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    // Go go go!\\n    function toggleSale() public onlyOwner {\\n        saleIsActive = !saleIsActive;\\n    }\\n\\n    // You had to expect this function, right?\\n    function withdrawBalance() public onlyOwner {\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    /** \\n     * Requests random number from Chainlink VRF function\\n     */\\n    function claim() public payable returns (bytes32 requestId) {\\n        require(LINK.balanceOf(address(this)) >= fee, \\\"Not enough LINK - fill contract with faucet\\\");\\n        require(saleIsActive, \\\"Minting not open yet!\\\");\\n        uint256 mintIndex = _tokenSupply.current() + 1; // Start IDs at 1\\n        require(mintIndex <= MAX_SUPPLY, \\\"No more CovidCats available to mint :(\\\");\\n        require(isClaiming[msg.sender] == false, \\\"YOU CANNOT CLAIM ANOTHER NFT YET\\\");\\n        require(msg.value >= MINT_PRICE, \\\"Not enough ETH to buy a CovidCat!\\\");\\n\\n        requestId = requestRandomness(keyHash, fee);\\n        requestToSender[requestId] = msg.sender;\\n        isClaiming[msg.sender] = true;\\n    }\\n\\n    /**\\n     * Callback function used by VRF Coordinator\\n     * Using \\\"Having multiple VRF requests in flight\\\" pattern as per https://docs.chain.link/docs/chainlink-vrf-best-practices/\\n     * Also using \\\"Getting multiple random numbers\\\" pattern\\n     * Also using \\\"Getting a random number within a range\\\" pattern\\n     * NOTE that this function has a gas limit of 200,000 or it will as per Chainlink docs\\n     */\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\\n        \\n        // Get tokenId for this NFT mint\\n        uint256 id = _tokenSupply.current() + 1;\\n\\n        address initiator = requestToSender[requestId];\\n        \\n        // Get 7 random numbers in the range from 1 to 100\\n        uint256[7] memory randomValues;\\n        \\n        for (uint256 i = 0; i < 7; i++) {\\n            randomValues[i] = uint256(keccak256(abi.encode(randomness, i)));\\n            randomValues[i] = (randomValues[i] % 100) + 1;\\n        }\\n\\n        // Mint NFT\\n        _tokenSupply.increment();\\n        _safeMint(initiator, id);\\n        \\n        emit Mint(initiator, id, \\n            [\\n                randomValues[0],\\n                randomValues[1],\\n                randomValues[2],\\n                randomValues[3],\\n                randomValues[4],\\n                randomValues[5],\\n                randomValues[6]\\n            ]\\n        );\\n\\n        isClaiming[initiator] = false;\\n    }\\n\\n    // Withdraw function to avoid locking your LINK in the contract\\n    function withdrawLink() onlyOwner external {\\n        uint256 LINK_balance = LINK_token.balanceOf(address(this));\\n        LINK_token.safeTransfer(msg.sender, LINK_balance);\\n    }\\n}\\n\",\"keccak256\":\"0x3c28069b8b0ed9aa477c15b5f9441f8a348811393cf764d6b435558efaf6dcd4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040526000600a60006101000a81548160ff0219169083151502179055503480156200002c57600080fd5b506040516200505d3803806200505d833981810160405281019062000052919062000398565b82826040518060400160405280600981526020017f436f7669644361747300000000000000000000000000000000000000000000008152506040518060400160405280600881526020017f436f7669644361740000000000000000000000000000000000000000000000008152508160009080519060200190620000d8929190620002ba565b508060019080519060200190620000f1929190620002ba565b5050508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050506200018462000178620001ec60201b60201c565b620001f460201b60201c565b600160088190555081601160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600d8190555067016345785d8a0000600e81905550505050620004c5565b600033905090565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b828054620002c8906200042c565b90600052602060002090601f016020900481019282620002ec576000855562000338565b82601f106200030757805160ff191683800117855562000338565b8280016001018555821562000338579182015b82811115620003375782518255916020019190600101906200031a565b5b5090506200034791906200034b565b5090565b5b80821115620003665760008160009055506001016200034c565b5090565b6000815190506200037b8162000491565b92915050565b6000815190506200039281620004ab565b92915050565b600080600060608486031215620003ae57600080fd5b6000620003be868287016200036a565b9350506020620003d1868287016200036a565b9250506040620003e48682870162000381565b9150509250925092565b6000620003fb826200040c565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600060028204905060018216806200044557607f821691505b602082108114156200045c576200045b62000462565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6200049c81620003ee565b8114620004a857600080fd5b50565b620004b68162000402565b8114620004c257600080fd5b50565b60805160601c60a05160601c614b5e620004ff6000396000818161146d0152612038015260008181610b680152611ffc0152614b5e6000f3fe6080604052600436106101c25760003560e01c8063715018a6116100f7578063a22cb46511610095578063da0239a611610064578063da0239a6146105e7578063e985e9c514610612578063eb8d24441461064f578063f2fde38b1461067a576101c2565b8063a22cb4651461052d578063b88d4fde14610556578063c002d23d1461057f578063c87b56dd146105aa576101c2565b80638da5cb5b116100d15780638da5cb5b146104975780638dc654a2146104c257806394985ddd146104d957806395d89b4114610502576101c2565b8063715018a61461043e5780637824407f146104555780637d8966e414610480576101c2565b806342842e0e11610164578063592756a11161013e578063592756a1146103825780635fd8c710146103ad5780636352211e146103c457806370a0823114610401576101c2565b806342842e0e146103125780634e71d92d1461033b57806355f804b314610359576101c2565b8063081812fc116101a0578063081812fc14610258578063095ea7b31461029557806323b872dd146102be57806332cb6b0c146102e7576101c2565b806301538868146101c757806301ffc9a7146101f057806306fdde031461022d575b600080fd5b3480156101d357600080fd5b506101ee60048036038101906101e991906133bd565b6106a3565b005b3480156101fc57600080fd5b50610217600480360381019061021291906132d8565b6107ca565b6040516102249190613add565b60405180910390f35b34801561023957600080fd5b506102426108ac565b60405161024f9190613b9c565b60405180910390f35b34801561026457600080fd5b5061027f600480360381019061027a919061336b565b61093e565b60405161028c91906139f4565b60405180910390f35b3480156102a157600080fd5b506102bc60048036038101906102b79190613237565b6109c3565b005b3480156102ca57600080fd5b506102e560048036038101906102e09190613131565b610adb565b005b3480156102f357600080fd5b506102fc610b3b565b6040516103099190613f1e565b60405180910390f35b34801561031e57600080fd5b5061033960048036038101906103349190613131565b610b41565b005b610343610b61565b6040516103509190613af8565b60405180910390f35b34801561036557600080fd5b50610380600480360381019061037b919061332a565b610e9a565b005b34801561038e57600080fd5b50610397610f30565b6040516103a49190613b81565b60405180910390f35b3480156103b957600080fd5b506103c2610f56565b005b3480156103d057600080fd5b506103eb60048036038101906103e6919061336b565b61101b565b6040516103f891906139f4565b60405180910390f35b34801561040d57600080fd5b50610428600480360381019061042391906130cc565b6110cd565b6040516104359190613f1e565b60405180910390f35b34801561044a57600080fd5b50610453611185565b005b34801561046157600080fd5b5061046a61120d565b6040516104779190613f1e565b60405180910390f35b34801561048c57600080fd5b5061049561121e565b005b3480156104a357600080fd5b506104ac6112c6565b6040516104b991906139f4565b60405180910390f35b3480156104ce57600080fd5b506104d76112f0565b005b3480156104e557600080fd5b5061050060048036038101906104fb919061329c565b61146b565b005b34801561050e57600080fd5b50610517611507565b6040516105249190613b9c565b60405180910390f35b34801561053957600080fd5b50610554600480360381019061054f91906131fb565b611599565b005b34801561056257600080fd5b5061057d60048036038101906105789190613180565b61171a565b005b34801561058b57600080fd5b5061059461177c565b6040516105a19190613f1e565b60405180910390f35b3480156105b657600080fd5b506105d160048036038101906105cc919061336b565b611788565b6040516105de9190613b9c565b60405180910390f35b3480156105f357600080fd5b506105fc61195c565b6040516106099190613f1e565b60405180910390f35b34801561061e57600080fd5b50610639600480360381019061063491906130f5565b61197a565b6040516106469190613add565b60405180910390f35b34801561065b57600080fd5b50610664611a0e565b6040516106719190613add565b60405180910390f35b34801561068657600080fd5b506106a1600480360381019061069c91906130cc565b611a21565b005b3373ffffffffffffffffffffffffffffffffffffffff166106c26112c6565b73ffffffffffffffffffffffffffffffffffffffff16148061071757503373ffffffffffffffffffffffffffffffffffffffff166106ff8361101b565b73ffffffffffffffffffffffffffffffffffffffff16145b610756576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074d90613efe565b60405180910390fd5b61075f82611b19565b61079e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079590613d9e565b60405180910390fd5b80600b600084815260200190815260200160002090805190602001906107c5929190612e8f565b505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061089557507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806108a557506108a482611b85565b5b9050919050565b6060600080546108bb906141d2565b80601f01602080910402602001604051908101604052809291908181526020018280546108e7906141d2565b80156109345780601f1061090957610100808354040283529160200191610934565b820191906000526020600020905b81548152906001019060200180831161091757829003601f168201915b5050505050905090565b600061094982611b19565b610988576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097f90613d7e565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006109ce8261101b565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3690613e3e565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610a5e611bef565b73ffffffffffffffffffffffffffffffffffffffff161480610a8d5750610a8c81610a87611bef565b61197a565b5b610acc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac390613cde565b60405180910390fd5b610ad68383611bf7565b505050565b610aec610ae6611bef565b82611cb0565b610b2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2290613e7e565b60405180910390fd5b610b36838383611d8e565b505050565b61271081565b610b5c8383836040518060200160405280600081525061171a565b505050565b6000600e547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610bbf91906139f4565b60206040518083038186803b158015610bd757600080fd5b505afa158015610beb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0f9190613394565b1015610c50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4790613c7e565b60405180910390fd5b600a60009054906101000a900460ff16610c9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9690613ede565b60405180910390fd5b60006001610cad6009611fea565b610cb79190614064565b9050612710811115610cfe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf590613d3e565b60405180910390fd5b60001515601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610d91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8890613e5e565b60405180910390fd5b67016345785d8a0000341015610ddc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd390613c1e565b60405180910390fd5b610dea600d54600e54611ff8565b915033600f600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505090565b610ea2611bef565b73ffffffffffffffffffffffffffffffffffffffff16610ec06112c6565b73ffffffffffffffffffffffffffffffffffffffff1614610f16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0d90613dbe565b60405180910390fd5b80600c9080519060200190610f2c929190612e8f565b5050565b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610f5e611bef565b73ffffffffffffffffffffffffffffffffffffffff16610f7c6112c6565b73ffffffffffffffffffffffffffffffffffffffff1614610fd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fc990613dbe565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015611018573d6000803e3d6000fd5b50565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156110c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110bb90613d1e565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561113e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113590613cfe565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61118d611bef565b73ffffffffffffffffffffffffffffffffffffffff166111ab6112c6565b73ffffffffffffffffffffffffffffffffffffffff1614611201576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f890613dbe565b60405180910390fd5b61120b600061215a565b565b60006112196009611fea565b905090565b611226611bef565b73ffffffffffffffffffffffffffffffffffffffff166112446112c6565b73ffffffffffffffffffffffffffffffffffffffff161461129a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129190613dbe565b60405180910390fd5b600a60009054906101000a900460ff1615600a60006101000a81548160ff021916908315150217905550565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6112f8611bef565b73ffffffffffffffffffffffffffffffffffffffff166113166112c6565b73ffffffffffffffffffffffffffffffffffffffff161461136c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136390613dbe565b60405180910390fd5b6000601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016113c991906139f4565b60206040518083038186803b1580156113e157600080fd5b505afa1580156113f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114199190613394565b90506114683382601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166122209092919063ffffffff16565b50565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146114f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f090613e1e565b60405180910390fd5b61150382826122a6565b5050565b606060018054611516906141d2565b80601f0160208091040260200160405190810160405280929190818152602001828054611542906141d2565b801561158f5780601f106115645761010080835404028352916020019161158f565b820191906000526020600020905b81548152906001019060200180831161157257829003601f168201915b5050505050905090565b6115a1611bef565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561160f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160690613c5e565b60405180910390fd5b806005600061161c611bef565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166116c9611bef565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161170e9190613add565b60405180910390a35050565b61172b611725611bef565b83611cb0565b61176a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176190613e7e565b60405180910390fd5b611776848484846126cc565b50505050565b67016345785d8a000081565b606061179382611b19565b6117d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117c990613dfe565b60405180910390fd5b6000600b600084815260200190815260200160002080546117f2906141d2565b80601f016020809104026020016040519081016040528092919081815260200182805461181e906141d2565b801561186b5780601f106118405761010080835404028352916020019161186b565b820191906000526020600020905b81548152906001019060200180831161184e57829003601f168201915b50505050509050600061187c612728565b9050600081511415611892578192505050611957565b6000825111156118c75780826040516020016118af9291906139d0565b60405160208183030381529060405292505050611957565b600c80546118d4906141d2565b80601f0160208091040260200160405190810160405280929190818152602001828054611900906141d2565b801561194d5780601f106119225761010080835404028352916020019161194d565b820191906000526020600020905b81548152906001019060200180831161193057829003601f168201915b5050505050925050505b919050565b60006119686009611fea565b61271061197591906140ba565b905090565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600a60009054906101000a900460ff1681565b611a29611bef565b73ffffffffffffffffffffffffffffffffffffffff16611a476112c6565b73ffffffffffffffffffffffffffffffffffffffff1614611a9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9490613dbe565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611b0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b0490613bde565b60405180910390fd5b611b168161215a565b50565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611c6a8361101b565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611cbb82611b19565b611cfa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cf190613cbe565b60405180910390fd5b6000611d058361101b565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611d7457508373ffffffffffffffffffffffffffffffffffffffff16611d5c8461093e565b73ffffffffffffffffffffffffffffffffffffffff16145b80611d855750611d84818561197a565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611dae8261101b565b73ffffffffffffffffffffffffffffffffffffffff1614611e04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dfb90613dde565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611e74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6b90613c3e565b60405180910390fd5b611e7f8383836127ba565b611e8a600082611bf7565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611eda91906140ba565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611f319190614064565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600081600001549050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634000aea07f00000000000000000000000000000000000000000000000000000000000000008486600060405160200161206c929190613b13565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161209993929190613a84565b602060405180830381600087803b1580156120b357600080fd5b505af11580156120c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120eb9190613273565b50600061210e8460003060066000898152602001908152602001600020546127bf565b9050600160066000868152602001908152602001600020546121309190614064565b600660008681526020019081526020016000208190555061215184826127fb565b91505092915050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6122a18363a9059cbb60e01b848460405160240161223f929190613a5b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061282e565b505050565b600060016122b46009611fea565b6122be9190614064565b90506000600f600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050612300612f15565b60005b600781101561242557848160405160200161231f929190613f39565b6040516020818303038152906040528051906020012060001c828260078110612371577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002018181525050600160648383600781106123b7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201516123c69190614292565b6123d09190614064565b828260078110612409577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002018181525050808061241d90614235565b915050612303565b5061243060096128f5565b61243a828461290b565b828273ffffffffffffffffffffffffffffffffffffffff167fc259216ea5a43a79dbc484bc761e3b8148023dec190ade5b1d181d2cb82da4496040518060e00160405280856000600781106124b8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201518152602001856001600781106124fc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151815260200185600260078110612540577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151815260200185600360078110612584577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201518152602001856004600781106125c8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015181526020018560056007811061260c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151815260200185600660078110612650577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201518152506040516126659190613ac2565b60405180910390a36000601060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050505050565b6126d7848484611d8e565b6126e384848484612929565b612722576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161271990613bbe565b60405180910390fd5b50505050565b6060600c8054612737906141d2565b80601f0160208091040260200160405190810160405280929190818152602001828054612763906141d2565b80156127b05780601f10612785576101008083540402835291602001916127b0565b820191906000526020600020905b81548152906001019060200180831161279357829003601f168201915b5050505050905090565b505050565b6000848484846040516020016127d89493929190613b3c565b6040516020818303038152906040528051906020012060001c9050949350505050565b6000828260405160200161281092919061398d565b60405160208183030381529060405280519060200120905092915050565b6000612890826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612ac09092919063ffffffff16565b90506000815111156128f057808060200190518101906128b09190613273565b6128ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128e690613ebe565b60405180910390fd5b5b505050565b6001816000016000828254019250508190555050565b612925828260405180602001604052806000815250612ad8565b5050565b600061294a8473ffffffffffffffffffffffffffffffffffffffff16612b33565b15612ab3578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612973611bef565b8786866040518563ffffffff1660e01b81526004016129959493929190613a0f565b602060405180830381600087803b1580156129af57600080fd5b505af19250505080156129e057506040513d601f19601f820116820180604052508101906129dd9190613301565b60015b612a63573d8060008114612a10576040519150601f19603f3d011682016040523d82523d6000602084013e612a15565b606091505b50600081511415612a5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a5290613bbe565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612ab8565b600190505b949350505050565b6060612acf8484600085612b46565b90509392505050565b612ae28383612c5a565b612aef6000848484612929565b612b2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b2590613bbe565b60405180910390fd5b505050565b600080823b905060008111915050919050565b606082471015612b8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b8290613c9e565b60405180910390fd5b612b9485612b33565b612bd3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bca90613e9e565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612bfc91906139b9565b60006040518083038185875af1925050503d8060008114612c39576040519150601f19603f3d011682016040523d82523d6000602084013e612c3e565b606091505b5091509150612c4e828286612e28565b92505050949350505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612cca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cc190613d5e565b60405180910390fd5b612cd381611b19565b15612d13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d0a90613bfe565b60405180910390fd5b612d1f600083836127ba565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612d6f9190614064565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b60608315612e3857829050612e88565b600083511115612e4b5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e7f9190613b9c565b60405180910390fd5b9392505050565b828054612e9b906141d2565b90600052602060002090601f016020900481019282612ebd5760008555612f04565b82601f10612ed657805160ff1916838001178555612f04565b82800160010185558215612f04579182015b82811115612f03578251825591602001919060010190612ee8565b5b509050612f119190612f37565b5090565b6040518060e00160405280600790602082028036833780820191505090505090565b5b80821115612f50576000816000905550600101612f38565b5090565b6000612f67612f6284613f87565b613f62565b905082815260208101848484011115612f7f57600080fd5b612f8a848285614190565b509392505050565b6000612fa5612fa084613fb8565b613f62565b905082815260208101848484011115612fbd57600080fd5b612fc8848285614190565b509392505050565b600081359050612fdf81614ab5565b92915050565b600081359050612ff481614acc565b92915050565b60008151905061300981614acc565b92915050565b60008135905061301e81614ae3565b92915050565b60008135905061303381614afa565b92915050565b60008151905061304881614afa565b92915050565b600082601f83011261305f57600080fd5b813561306f848260208601612f54565b91505092915050565b600082601f83011261308957600080fd5b8135613099848260208601612f92565b91505092915050565b6000813590506130b181614b11565b92915050565b6000815190506130c681614b11565b92915050565b6000602082840312156130de57600080fd5b60006130ec84828501612fd0565b91505092915050565b6000806040838503121561310857600080fd5b600061311685828601612fd0565b925050602061312785828601612fd0565b9150509250929050565b60008060006060848603121561314657600080fd5b600061315486828701612fd0565b935050602061316586828701612fd0565b9250506040613176868287016130a2565b9150509250925092565b6000806000806080858703121561319657600080fd5b60006131a487828801612fd0565b94505060206131b587828801612fd0565b93505060406131c6878288016130a2565b925050606085013567ffffffffffffffff8111156131e357600080fd5b6131ef8782880161304e565b91505092959194509250565b6000806040838503121561320e57600080fd5b600061321c85828601612fd0565b925050602061322d85828601612fe5565b9150509250929050565b6000806040838503121561324a57600080fd5b600061325885828601612fd0565b9250506020613269858286016130a2565b9150509250929050565b60006020828403121561328557600080fd5b600061329384828501612ffa565b91505092915050565b600080604083850312156132af57600080fd5b60006132bd8582860161300f565b92505060206132ce858286016130a2565b9150509250929050565b6000602082840312156132ea57600080fd5b60006132f884828501613024565b91505092915050565b60006020828403121561331357600080fd5b600061332184828501613039565b91505092915050565b60006020828403121561333c57600080fd5b600082013567ffffffffffffffff81111561335657600080fd5b61336284828501613078565b91505092915050565b60006020828403121561337d57600080fd5b600061338b848285016130a2565b91505092915050565b6000602082840312156133a657600080fd5b60006133b4848285016130b7565b91505092915050565b600080604083850312156133d057600080fd5b60006133de858286016130a2565b925050602083013567ffffffffffffffff8111156133fb57600080fd5b61340785828601613078565b9150509250929050565b600061341d8383613958565b60208301905092915050565b613432816140ee565b82525050565b61344181613ff3565b61344b8184614021565b925061345682613fe9565b8060005b8381101561348757815161346e8782613411565b965061347983614014565b92505060018101905061345a565b505050505050565b61349881614100565b82525050565b6134a78161410c565b82525050565b6134be6134b98261410c565b61427e565b82525050565b60006134cf82613ffe565b6134d9818561402c565b93506134e981856020860161419f565b6134f28161437f565b840191505092915050565b600061350882613ffe565b613512818561403d565b935061352281856020860161419f565b80840191505092915050565b6135378161416c565b82525050565b600061354882614009565b6135528185614048565b935061356281856020860161419f565b61356b8161437f565b840191505092915050565b600061358182614009565b61358b8185614059565b935061359b81856020860161419f565b80840191505092915050565b60006135b4603283614048565b91506135bf82614390565b604082019050919050565b60006135d7602683614048565b91506135e2826143df565b604082019050919050565b60006135fa601c83614048565b91506136058261442e565b602082019050919050565b600061361d602183614048565b915061362882614457565b604082019050919050565b6000613640602483614048565b915061364b826144a6565b604082019050919050565b6000613663601983614048565b915061366e826144f5565b602082019050919050565b6000613686602b83614048565b91506136918261451e565b604082019050919050565b60006136a9602683614048565b91506136b48261456d565b604082019050919050565b60006136cc602c83614048565b91506136d7826145bc565b604082019050919050565b60006136ef603883614048565b91506136fa8261460b565b604082019050919050565b6000613712602a83614048565b915061371d8261465a565b604082019050919050565b6000613735602983614048565b9150613740826146a9565b604082019050919050565b6000613758602683614048565b9150613763826146f8565b604082019050919050565b600061377b602083614048565b915061378682614747565b602082019050919050565b600061379e602c83614048565b91506137a982614770565b604082019050919050565b60006137c1602c83614048565b91506137cc826147bf565b604082019050919050565b60006137e4602083614048565b91506137ef8261480e565b602082019050919050565b6000613807602983614048565b915061381282614837565b604082019050919050565b600061382a602f83614048565b915061383582614886565b604082019050919050565b600061384d601f83614048565b9150613858826148d5565b602082019050919050565b6000613870602183614048565b915061387b826148fe565b604082019050919050565b6000613893602083614048565b915061389e8261494d565b602082019050919050565b60006138b6603183614048565b91506138c182614976565b604082019050919050565b60006138d9601d83614048565b91506138e4826149c5565b602082019050919050565b60006138fc602a83614048565b9150613907826149ee565b604082019050919050565b600061391f601583614048565b915061392a82614a3d565b602082019050919050565b6000613942603983614048565b915061394d82614a66565b604082019050919050565b61396181614162565b82525050565b61397081614162565b82525050565b61398761398282614162565b614288565b82525050565b600061399982856134ad565b6020820191506139a98284613976565b6020820191508190509392505050565b60006139c582846134fd565b915081905092915050565b60006139dc8285613576565b91506139e88284613576565b91508190509392505050565b6000602082019050613a096000830184613429565b92915050565b6000608082019050613a246000830187613429565b613a316020830186613429565b613a3e6040830185613967565b8181036060830152613a5081846134c4565b905095945050505050565b6000604082019050613a706000830185613429565b613a7d6020830184613967565b9392505050565b6000606082019050613a996000830186613429565b613aa66020830185613967565b8181036040830152613ab881846134c4565b9050949350505050565b600060e082019050613ad76000830184613438565b92915050565b6000602082019050613af2600083018461348f565b92915050565b6000602082019050613b0d600083018461349e565b92915050565b6000604082019050613b28600083018561349e565b613b356020830184613967565b9392505050565b6000608082019050613b51600083018761349e565b613b5e6020830186613967565b613b6b6040830185613429565b613b786060830184613967565b95945050505050565b6000602082019050613b96600083018461352e565b92915050565b60006020820190508181036000830152613bb6818461353d565b905092915050565b60006020820190508181036000830152613bd7816135a7565b9050919050565b60006020820190508181036000830152613bf7816135ca565b9050919050565b60006020820190508181036000830152613c17816135ed565b9050919050565b60006020820190508181036000830152613c3781613610565b9050919050565b60006020820190508181036000830152613c5781613633565b9050919050565b60006020820190508181036000830152613c7781613656565b9050919050565b60006020820190508181036000830152613c9781613679565b9050919050565b60006020820190508181036000830152613cb78161369c565b9050919050565b60006020820190508181036000830152613cd7816136bf565b9050919050565b60006020820190508181036000830152613cf7816136e2565b9050919050565b60006020820190508181036000830152613d1781613705565b9050919050565b60006020820190508181036000830152613d3781613728565b9050919050565b60006020820190508181036000830152613d578161374b565b9050919050565b60006020820190508181036000830152613d778161376e565b9050919050565b60006020820190508181036000830152613d9781613791565b9050919050565b60006020820190508181036000830152613db7816137b4565b9050919050565b60006020820190508181036000830152613dd7816137d7565b9050919050565b60006020820190508181036000830152613df7816137fa565b9050919050565b60006020820190508181036000830152613e178161381d565b9050919050565b60006020820190508181036000830152613e3781613840565b9050919050565b60006020820190508181036000830152613e5781613863565b9050919050565b60006020820190508181036000830152613e7781613886565b9050919050565b60006020820190508181036000830152613e97816138a9565b9050919050565b60006020820190508181036000830152613eb7816138cc565b9050919050565b60006020820190508181036000830152613ed7816138ef565b9050919050565b60006020820190508181036000830152613ef781613912565b9050919050565b60006020820190508181036000830152613f1781613935565b9050919050565b6000602082019050613f336000830184613967565b92915050565b6000604082019050613f4e6000830185613967565b613f5b6020830184613967565b9392505050565b6000613f6c613f7d565b9050613f788282614204565b919050565b6000604051905090565b600067ffffffffffffffff821115613fa257613fa1614350565b5b613fab8261437f565b9050602081019050919050565b600067ffffffffffffffff821115613fd357613fd2614350565b5b613fdc8261437f565b9050602081019050919050565b6000819050919050565b600060079050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600061406f82614162565b915061407a83614162565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156140af576140ae6142c3565b5b828201905092915050565b60006140c582614162565b91506140d083614162565b9250828210156140e3576140e26142c3565b5b828203905092915050565b60006140f982614142565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006141778261417e565b9050919050565b600061418982614142565b9050919050565b82818337600083830152505050565b60005b838110156141bd5780820151818401526020810190506141a2565b838111156141cc576000848401525b50505050565b600060028204905060018216806141ea57607f821691505b602082108114156141fe576141fd614321565b5b50919050565b61420d8261437f565b810181811067ffffffffffffffff8211171561422c5761422b614350565b5b80604052505050565b600061424082614162565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614273576142726142c3565b5b600182019050919050565b6000819050919050565b6000819050919050565b600061429d82614162565b91506142a883614162565b9250826142b8576142b76142f2565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4e6f7420656e6f7567682045544820746f20627579206120436f76696443617460008201527f2100000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4e6f7420656e6f756768204c494e4b202d2066696c6c20636f6e74726163742060008201527f7769746820666175636574000000000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4e6f206d6f726520436f7669644361747320617661696c61626c6520746f206d60008201527f696e74203a280000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920736574206f66206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c00600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f594f552043414e4e4f5420434c41494d20414e4f54484552204e465420594554600082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f4d696e74696e67206e6f74206f70656e20796574210000000000000000000000600082015250565b7f4f6e6c792074686520636f6e7472616374206f776e6572206f72204e4654206f60008201527f776e65722063616e207365742074686520746f6b656e55524900000000000000602082015250565b614abe816140ee565b8114614ac957600080fd5b50565b614ad581614100565b8114614ae057600080fd5b50565b614aec8161410c565b8114614af757600080fd5b50565b614b0381614116565b8114614b0e57600080fd5b50565b614b1a81614162565b8114614b2557600080fd5b5056fea2646970667358221220df51e39fe73f9a66d1572364bf3185d891c5ffcf667c63d263a5c2c63872e2b164736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101c25760003560e01c8063715018a6116100f7578063a22cb46511610095578063da0239a611610064578063da0239a6146105e7578063e985e9c514610612578063eb8d24441461064f578063f2fde38b1461067a576101c2565b8063a22cb4651461052d578063b88d4fde14610556578063c002d23d1461057f578063c87b56dd146105aa576101c2565b80638da5cb5b116100d15780638da5cb5b146104975780638dc654a2146104c257806394985ddd146104d957806395d89b4114610502576101c2565b8063715018a61461043e5780637824407f146104555780637d8966e414610480576101c2565b806342842e0e11610164578063592756a11161013e578063592756a1146103825780635fd8c710146103ad5780636352211e146103c457806370a0823114610401576101c2565b806342842e0e146103125780634e71d92d1461033b57806355f804b314610359576101c2565b8063081812fc116101a0578063081812fc14610258578063095ea7b31461029557806323b872dd146102be57806332cb6b0c146102e7576101c2565b806301538868146101c757806301ffc9a7146101f057806306fdde031461022d575b600080fd5b3480156101d357600080fd5b506101ee60048036038101906101e991906133bd565b6106a3565b005b3480156101fc57600080fd5b50610217600480360381019061021291906132d8565b6107ca565b6040516102249190613add565b60405180910390f35b34801561023957600080fd5b506102426108ac565b60405161024f9190613b9c565b60405180910390f35b34801561026457600080fd5b5061027f600480360381019061027a919061336b565b61093e565b60405161028c91906139f4565b60405180910390f35b3480156102a157600080fd5b506102bc60048036038101906102b79190613237565b6109c3565b005b3480156102ca57600080fd5b506102e560048036038101906102e09190613131565b610adb565b005b3480156102f357600080fd5b506102fc610b3b565b6040516103099190613f1e565b60405180910390f35b34801561031e57600080fd5b5061033960048036038101906103349190613131565b610b41565b005b610343610b61565b6040516103509190613af8565b60405180910390f35b34801561036557600080fd5b50610380600480360381019061037b919061332a565b610e9a565b005b34801561038e57600080fd5b50610397610f30565b6040516103a49190613b81565b60405180910390f35b3480156103b957600080fd5b506103c2610f56565b005b3480156103d057600080fd5b506103eb60048036038101906103e6919061336b565b61101b565b6040516103f891906139f4565b60405180910390f35b34801561040d57600080fd5b50610428600480360381019061042391906130cc565b6110cd565b6040516104359190613f1e565b60405180910390f35b34801561044a57600080fd5b50610453611185565b005b34801561046157600080fd5b5061046a61120d565b6040516104779190613f1e565b60405180910390f35b34801561048c57600080fd5b5061049561121e565b005b3480156104a357600080fd5b506104ac6112c6565b6040516104b991906139f4565b60405180910390f35b3480156104ce57600080fd5b506104d76112f0565b005b3480156104e557600080fd5b5061050060048036038101906104fb919061329c565b61146b565b005b34801561050e57600080fd5b50610517611507565b6040516105249190613b9c565b60405180910390f35b34801561053957600080fd5b50610554600480360381019061054f91906131fb565b611599565b005b34801561056257600080fd5b5061057d60048036038101906105789190613180565b61171a565b005b34801561058b57600080fd5b5061059461177c565b6040516105a19190613f1e565b60405180910390f35b3480156105b657600080fd5b506105d160048036038101906105cc919061336b565b611788565b6040516105de9190613b9c565b60405180910390f35b3480156105f357600080fd5b506105fc61195c565b6040516106099190613f1e565b60405180910390f35b34801561061e57600080fd5b50610639600480360381019061063491906130f5565b61197a565b6040516106469190613add565b60405180910390f35b34801561065b57600080fd5b50610664611a0e565b6040516106719190613add565b60405180910390f35b34801561068657600080fd5b506106a1600480360381019061069c91906130cc565b611a21565b005b3373ffffffffffffffffffffffffffffffffffffffff166106c26112c6565b73ffffffffffffffffffffffffffffffffffffffff16148061071757503373ffffffffffffffffffffffffffffffffffffffff166106ff8361101b565b73ffffffffffffffffffffffffffffffffffffffff16145b610756576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074d90613efe565b60405180910390fd5b61075f82611b19565b61079e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079590613d9e565b60405180910390fd5b80600b600084815260200190815260200160002090805190602001906107c5929190612e8f565b505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061089557507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806108a557506108a482611b85565b5b9050919050565b6060600080546108bb906141d2565b80601f01602080910402602001604051908101604052809291908181526020018280546108e7906141d2565b80156109345780601f1061090957610100808354040283529160200191610934565b820191906000526020600020905b81548152906001019060200180831161091757829003601f168201915b5050505050905090565b600061094982611b19565b610988576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097f90613d7e565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006109ce8261101b565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3690613e3e565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610a5e611bef565b73ffffffffffffffffffffffffffffffffffffffff161480610a8d5750610a8c81610a87611bef565b61197a565b5b610acc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac390613cde565b60405180910390fd5b610ad68383611bf7565b505050565b610aec610ae6611bef565b82611cb0565b610b2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2290613e7e565b60405180910390fd5b610b36838383611d8e565b505050565b61271081565b610b5c8383836040518060200160405280600081525061171a565b505050565b6000600e547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610bbf91906139f4565b60206040518083038186803b158015610bd757600080fd5b505afa158015610beb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0f9190613394565b1015610c50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4790613c7e565b60405180910390fd5b600a60009054906101000a900460ff16610c9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9690613ede565b60405180910390fd5b60006001610cad6009611fea565b610cb79190614064565b9050612710811115610cfe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf590613d3e565b60405180910390fd5b60001515601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610d91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8890613e5e565b60405180910390fd5b67016345785d8a0000341015610ddc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd390613c1e565b60405180910390fd5b610dea600d54600e54611ff8565b915033600f600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505090565b610ea2611bef565b73ffffffffffffffffffffffffffffffffffffffff16610ec06112c6565b73ffffffffffffffffffffffffffffffffffffffff1614610f16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0d90613dbe565b60405180910390fd5b80600c9080519060200190610f2c929190612e8f565b5050565b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610f5e611bef565b73ffffffffffffffffffffffffffffffffffffffff16610f7c6112c6565b73ffffffffffffffffffffffffffffffffffffffff1614610fd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fc990613dbe565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015611018573d6000803e3d6000fd5b50565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156110c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110bb90613d1e565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561113e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113590613cfe565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61118d611bef565b73ffffffffffffffffffffffffffffffffffffffff166111ab6112c6565b73ffffffffffffffffffffffffffffffffffffffff1614611201576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f890613dbe565b60405180910390fd5b61120b600061215a565b565b60006112196009611fea565b905090565b611226611bef565b73ffffffffffffffffffffffffffffffffffffffff166112446112c6565b73ffffffffffffffffffffffffffffffffffffffff161461129a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129190613dbe565b60405180910390fd5b600a60009054906101000a900460ff1615600a60006101000a81548160ff021916908315150217905550565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6112f8611bef565b73ffffffffffffffffffffffffffffffffffffffff166113166112c6565b73ffffffffffffffffffffffffffffffffffffffff161461136c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136390613dbe565b60405180910390fd5b6000601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016113c991906139f4565b60206040518083038186803b1580156113e157600080fd5b505afa1580156113f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114199190613394565b90506114683382601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166122209092919063ffffffff16565b50565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146114f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f090613e1e565b60405180910390fd5b61150382826122a6565b5050565b606060018054611516906141d2565b80601f0160208091040260200160405190810160405280929190818152602001828054611542906141d2565b801561158f5780601f106115645761010080835404028352916020019161158f565b820191906000526020600020905b81548152906001019060200180831161157257829003601f168201915b5050505050905090565b6115a1611bef565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561160f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160690613c5e565b60405180910390fd5b806005600061161c611bef565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166116c9611bef565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161170e9190613add565b60405180910390a35050565b61172b611725611bef565b83611cb0565b61176a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176190613e7e565b60405180910390fd5b611776848484846126cc565b50505050565b67016345785d8a000081565b606061179382611b19565b6117d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117c990613dfe565b60405180910390fd5b6000600b600084815260200190815260200160002080546117f2906141d2565b80601f016020809104026020016040519081016040528092919081815260200182805461181e906141d2565b801561186b5780601f106118405761010080835404028352916020019161186b565b820191906000526020600020905b81548152906001019060200180831161184e57829003601f168201915b50505050509050600061187c612728565b9050600081511415611892578192505050611957565b6000825111156118c75780826040516020016118af9291906139d0565b60405160208183030381529060405292505050611957565b600c80546118d4906141d2565b80601f0160208091040260200160405190810160405280929190818152602001828054611900906141d2565b801561194d5780601f106119225761010080835404028352916020019161194d565b820191906000526020600020905b81548152906001019060200180831161193057829003601f168201915b5050505050925050505b919050565b60006119686009611fea565b61271061197591906140ba565b905090565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600a60009054906101000a900460ff1681565b611a29611bef565b73ffffffffffffffffffffffffffffffffffffffff16611a476112c6565b73ffffffffffffffffffffffffffffffffffffffff1614611a9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9490613dbe565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611b0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b0490613bde565b60405180910390fd5b611b168161215a565b50565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611c6a8361101b565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611cbb82611b19565b611cfa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cf190613cbe565b60405180910390fd5b6000611d058361101b565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611d7457508373ffffffffffffffffffffffffffffffffffffffff16611d5c8461093e565b73ffffffffffffffffffffffffffffffffffffffff16145b80611d855750611d84818561197a565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611dae8261101b565b73ffffffffffffffffffffffffffffffffffffffff1614611e04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dfb90613dde565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611e74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6b90613c3e565b60405180910390fd5b611e7f8383836127ba565b611e8a600082611bf7565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611eda91906140ba565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611f319190614064565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600081600001549050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634000aea07f00000000000000000000000000000000000000000000000000000000000000008486600060405160200161206c929190613b13565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161209993929190613a84565b602060405180830381600087803b1580156120b357600080fd5b505af11580156120c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120eb9190613273565b50600061210e8460003060066000898152602001908152602001600020546127bf565b9050600160066000868152602001908152602001600020546121309190614064565b600660008681526020019081526020016000208190555061215184826127fb565b91505092915050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6122a18363a9059cbb60e01b848460405160240161223f929190613a5b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061282e565b505050565b600060016122b46009611fea565b6122be9190614064565b90506000600f600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050612300612f15565b60005b600781101561242557848160405160200161231f929190613f39565b6040516020818303038152906040528051906020012060001c828260078110612371577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002018181525050600160648383600781106123b7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201516123c69190614292565b6123d09190614064565b828260078110612409577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002018181525050808061241d90614235565b915050612303565b5061243060096128f5565b61243a828461290b565b828273ffffffffffffffffffffffffffffffffffffffff167fc259216ea5a43a79dbc484bc761e3b8148023dec190ade5b1d181d2cb82da4496040518060e00160405280856000600781106124b8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201518152602001856001600781106124fc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151815260200185600260078110612540577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151815260200185600360078110612584577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201518152602001856004600781106125c8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015181526020018560056007811061260c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151815260200185600660078110612650577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201518152506040516126659190613ac2565b60405180910390a36000601060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050505050565b6126d7848484611d8e565b6126e384848484612929565b612722576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161271990613bbe565b60405180910390fd5b50505050565b6060600c8054612737906141d2565b80601f0160208091040260200160405190810160405280929190818152602001828054612763906141d2565b80156127b05780601f10612785576101008083540402835291602001916127b0565b820191906000526020600020905b81548152906001019060200180831161279357829003601f168201915b5050505050905090565b505050565b6000848484846040516020016127d89493929190613b3c565b6040516020818303038152906040528051906020012060001c9050949350505050565b6000828260405160200161281092919061398d565b60405160208183030381529060405280519060200120905092915050565b6000612890826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612ac09092919063ffffffff16565b90506000815111156128f057808060200190518101906128b09190613273565b6128ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128e690613ebe565b60405180910390fd5b5b505050565b6001816000016000828254019250508190555050565b612925828260405180602001604052806000815250612ad8565b5050565b600061294a8473ffffffffffffffffffffffffffffffffffffffff16612b33565b15612ab3578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612973611bef565b8786866040518563ffffffff1660e01b81526004016129959493929190613a0f565b602060405180830381600087803b1580156129af57600080fd5b505af19250505080156129e057506040513d601f19601f820116820180604052508101906129dd9190613301565b60015b612a63573d8060008114612a10576040519150601f19603f3d011682016040523d82523d6000602084013e612a15565b606091505b50600081511415612a5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a5290613bbe565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612ab8565b600190505b949350505050565b6060612acf8484600085612b46565b90509392505050565b612ae28383612c5a565b612aef6000848484612929565b612b2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b2590613bbe565b60405180910390fd5b505050565b600080823b905060008111915050919050565b606082471015612b8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b8290613c9e565b60405180910390fd5b612b9485612b33565b612bd3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bca90613e9e565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612bfc91906139b9565b60006040518083038185875af1925050503d8060008114612c39576040519150601f19603f3d011682016040523d82523d6000602084013e612c3e565b606091505b5091509150612c4e828286612e28565b92505050949350505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612cca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cc190613d5e565b60405180910390fd5b612cd381611b19565b15612d13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d0a90613bfe565b60405180910390fd5b612d1f600083836127ba565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612d6f9190614064565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b60608315612e3857829050612e88565b600083511115612e4b5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e7f9190613b9c565b60405180910390fd5b9392505050565b828054612e9b906141d2565b90600052602060002090601f016020900481019282612ebd5760008555612f04565b82601f10612ed657805160ff1916838001178555612f04565b82800160010185558215612f04579182015b82811115612f03578251825591602001919060010190612ee8565b5b509050612f119190612f37565b5090565b6040518060e00160405280600790602082028036833780820191505090505090565b5b80821115612f50576000816000905550600101612f38565b5090565b6000612f67612f6284613f87565b613f62565b905082815260208101848484011115612f7f57600080fd5b612f8a848285614190565b509392505050565b6000612fa5612fa084613fb8565b613f62565b905082815260208101848484011115612fbd57600080fd5b612fc8848285614190565b509392505050565b600081359050612fdf81614ab5565b92915050565b600081359050612ff481614acc565b92915050565b60008151905061300981614acc565b92915050565b60008135905061301e81614ae3565b92915050565b60008135905061303381614afa565b92915050565b60008151905061304881614afa565b92915050565b600082601f83011261305f57600080fd5b813561306f848260208601612f54565b91505092915050565b600082601f83011261308957600080fd5b8135613099848260208601612f92565b91505092915050565b6000813590506130b181614b11565b92915050565b6000815190506130c681614b11565b92915050565b6000602082840312156130de57600080fd5b60006130ec84828501612fd0565b91505092915050565b6000806040838503121561310857600080fd5b600061311685828601612fd0565b925050602061312785828601612fd0565b9150509250929050565b60008060006060848603121561314657600080fd5b600061315486828701612fd0565b935050602061316586828701612fd0565b9250506040613176868287016130a2565b9150509250925092565b6000806000806080858703121561319657600080fd5b60006131a487828801612fd0565b94505060206131b587828801612fd0565b93505060406131c6878288016130a2565b925050606085013567ffffffffffffffff8111156131e357600080fd5b6131ef8782880161304e565b91505092959194509250565b6000806040838503121561320e57600080fd5b600061321c85828601612fd0565b925050602061322d85828601612fe5565b9150509250929050565b6000806040838503121561324a57600080fd5b600061325885828601612fd0565b9250506020613269858286016130a2565b9150509250929050565b60006020828403121561328557600080fd5b600061329384828501612ffa565b91505092915050565b600080604083850312156132af57600080fd5b60006132bd8582860161300f565b92505060206132ce858286016130a2565b9150509250929050565b6000602082840312156132ea57600080fd5b60006132f884828501613024565b91505092915050565b60006020828403121561331357600080fd5b600061332184828501613039565b91505092915050565b60006020828403121561333c57600080fd5b600082013567ffffffffffffffff81111561335657600080fd5b61336284828501613078565b91505092915050565b60006020828403121561337d57600080fd5b600061338b848285016130a2565b91505092915050565b6000602082840312156133a657600080fd5b60006133b4848285016130b7565b91505092915050565b600080604083850312156133d057600080fd5b60006133de858286016130a2565b925050602083013567ffffffffffffffff8111156133fb57600080fd5b61340785828601613078565b9150509250929050565b600061341d8383613958565b60208301905092915050565b613432816140ee565b82525050565b61344181613ff3565b61344b8184614021565b925061345682613fe9565b8060005b8381101561348757815161346e8782613411565b965061347983614014565b92505060018101905061345a565b505050505050565b61349881614100565b82525050565b6134a78161410c565b82525050565b6134be6134b98261410c565b61427e565b82525050565b60006134cf82613ffe565b6134d9818561402c565b93506134e981856020860161419f565b6134f28161437f565b840191505092915050565b600061350882613ffe565b613512818561403d565b935061352281856020860161419f565b80840191505092915050565b6135378161416c565b82525050565b600061354882614009565b6135528185614048565b935061356281856020860161419f565b61356b8161437f565b840191505092915050565b600061358182614009565b61358b8185614059565b935061359b81856020860161419f565b80840191505092915050565b60006135b4603283614048565b91506135bf82614390565b604082019050919050565b60006135d7602683614048565b91506135e2826143df565b604082019050919050565b60006135fa601c83614048565b91506136058261442e565b602082019050919050565b600061361d602183614048565b915061362882614457565b604082019050919050565b6000613640602483614048565b915061364b826144a6565b604082019050919050565b6000613663601983614048565b915061366e826144f5565b602082019050919050565b6000613686602b83614048565b91506136918261451e565b604082019050919050565b60006136a9602683614048565b91506136b48261456d565b604082019050919050565b60006136cc602c83614048565b91506136d7826145bc565b604082019050919050565b60006136ef603883614048565b91506136fa8261460b565b604082019050919050565b6000613712602a83614048565b915061371d8261465a565b604082019050919050565b6000613735602983614048565b9150613740826146a9565b604082019050919050565b6000613758602683614048565b9150613763826146f8565b604082019050919050565b600061377b602083614048565b915061378682614747565b602082019050919050565b600061379e602c83614048565b91506137a982614770565b604082019050919050565b60006137c1602c83614048565b91506137cc826147bf565b604082019050919050565b60006137e4602083614048565b91506137ef8261480e565b602082019050919050565b6000613807602983614048565b915061381282614837565b604082019050919050565b600061382a602f83614048565b915061383582614886565b604082019050919050565b600061384d601f83614048565b9150613858826148d5565b602082019050919050565b6000613870602183614048565b915061387b826148fe565b604082019050919050565b6000613893602083614048565b915061389e8261494d565b602082019050919050565b60006138b6603183614048565b91506138c182614976565b604082019050919050565b60006138d9601d83614048565b91506138e4826149c5565b602082019050919050565b60006138fc602a83614048565b9150613907826149ee565b604082019050919050565b600061391f601583614048565b915061392a82614a3d565b602082019050919050565b6000613942603983614048565b915061394d82614a66565b604082019050919050565b61396181614162565b82525050565b61397081614162565b82525050565b61398761398282614162565b614288565b82525050565b600061399982856134ad565b6020820191506139a98284613976565b6020820191508190509392505050565b60006139c582846134fd565b915081905092915050565b60006139dc8285613576565b91506139e88284613576565b91508190509392505050565b6000602082019050613a096000830184613429565b92915050565b6000608082019050613a246000830187613429565b613a316020830186613429565b613a3e6040830185613967565b8181036060830152613a5081846134c4565b905095945050505050565b6000604082019050613a706000830185613429565b613a7d6020830184613967565b9392505050565b6000606082019050613a996000830186613429565b613aa66020830185613967565b8181036040830152613ab881846134c4565b9050949350505050565b600060e082019050613ad76000830184613438565b92915050565b6000602082019050613af2600083018461348f565b92915050565b6000602082019050613b0d600083018461349e565b92915050565b6000604082019050613b28600083018561349e565b613b356020830184613967565b9392505050565b6000608082019050613b51600083018761349e565b613b5e6020830186613967565b613b6b6040830185613429565b613b786060830184613967565b95945050505050565b6000602082019050613b96600083018461352e565b92915050565b60006020820190508181036000830152613bb6818461353d565b905092915050565b60006020820190508181036000830152613bd7816135a7565b9050919050565b60006020820190508181036000830152613bf7816135ca565b9050919050565b60006020820190508181036000830152613c17816135ed565b9050919050565b60006020820190508181036000830152613c3781613610565b9050919050565b60006020820190508181036000830152613c5781613633565b9050919050565b60006020820190508181036000830152613c7781613656565b9050919050565b60006020820190508181036000830152613c9781613679565b9050919050565b60006020820190508181036000830152613cb78161369c565b9050919050565b60006020820190508181036000830152613cd7816136bf565b9050919050565b60006020820190508181036000830152613cf7816136e2565b9050919050565b60006020820190508181036000830152613d1781613705565b9050919050565b60006020820190508181036000830152613d3781613728565b9050919050565b60006020820190508181036000830152613d578161374b565b9050919050565b60006020820190508181036000830152613d778161376e565b9050919050565b60006020820190508181036000830152613d9781613791565b9050919050565b60006020820190508181036000830152613db7816137b4565b9050919050565b60006020820190508181036000830152613dd7816137d7565b9050919050565b60006020820190508181036000830152613df7816137fa565b9050919050565b60006020820190508181036000830152613e178161381d565b9050919050565b60006020820190508181036000830152613e3781613840565b9050919050565b60006020820190508181036000830152613e5781613863565b9050919050565b60006020820190508181036000830152613e7781613886565b9050919050565b60006020820190508181036000830152613e97816138a9565b9050919050565b60006020820190508181036000830152613eb7816138cc565b9050919050565b60006020820190508181036000830152613ed7816138ef565b9050919050565b60006020820190508181036000830152613ef781613912565b9050919050565b60006020820190508181036000830152613f1781613935565b9050919050565b6000602082019050613f336000830184613967565b92915050565b6000604082019050613f4e6000830185613967565b613f5b6020830184613967565b9392505050565b6000613f6c613f7d565b9050613f788282614204565b919050565b6000604051905090565b600067ffffffffffffffff821115613fa257613fa1614350565b5b613fab8261437f565b9050602081019050919050565b600067ffffffffffffffff821115613fd357613fd2614350565b5b613fdc8261437f565b9050602081019050919050565b6000819050919050565b600060079050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600061406f82614162565b915061407a83614162565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156140af576140ae6142c3565b5b828201905092915050565b60006140c582614162565b91506140d083614162565b9250828210156140e3576140e26142c3565b5b828203905092915050565b60006140f982614142565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006141778261417e565b9050919050565b600061418982614142565b9050919050565b82818337600083830152505050565b60005b838110156141bd5780820151818401526020810190506141a2565b838111156141cc576000848401525b50505050565b600060028204905060018216806141ea57607f821691505b602082108114156141fe576141fd614321565b5b50919050565b61420d8261437f565b810181811067ffffffffffffffff8211171561422c5761422b614350565b5b80604052505050565b600061424082614162565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614273576142726142c3565b5b600182019050919050565b6000819050919050565b6000819050919050565b600061429d82614162565b91506142a883614162565b9250826142b8576142b76142f2565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4e6f7420656e6f7567682045544820746f20627579206120436f76696443617460008201527f2100000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4e6f7420656e6f756768204c494e4b202d2066696c6c20636f6e74726163742060008201527f7769746820666175636574000000000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4e6f206d6f726520436f7669644361747320617661696c61626c6520746f206d60008201527f696e74203a280000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920736574206f66206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c00600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f594f552043414e4e4f5420434c41494d20414e4f54484552204e465420594554600082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f4d696e74696e67206e6f74206f70656e20796574210000000000000000000000600082015250565b7f4f6e6c792074686520636f6e7472616374206f776e6572206f72204e4654206f60008201527f776e65722063616e207365742074686520746f6b656e55524900000000000000602082015250565b614abe816140ee565b8114614ac957600080fd5b50565b614ad581614100565b8114614ae057600080fd5b50565b614aec8161410c565b8114614af757600080fd5b50565b614b0381614116565b8114614b0e57600080fd5b50565b614b1a81614162565b8114614b2557600080fd5b5056fea2646970667358221220df51e39fe73f9a66d1572364bf3185d891c5ffcf667c63d263a5c2c63872e2b164736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claim()": {
        "notice": "Requests random number from Chainlink VRF function"
      },
      "remainingSupply()": {
        "notice": "NFT Helper Functions"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 737,
        "contract": "contracts/CovidCats.sol:CovidCats",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 739,
        "contract": "contracts/CovidCats.sol:CovidCats",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 743,
        "contract": "contracts/CovidCats.sol:CovidCats",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 747,
        "contract": "contracts/CovidCats.sol:CovidCats",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 751,
        "contract": "contracts/CovidCats.sol:CovidCats",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 757,
        "contract": "contracts/CovidCats.sol:CovidCats",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 79,
        "contract": "contracts/CovidCats.sol:CovidCats",
        "label": "nonces",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 273,
        "contract": "contracts/CovidCats.sol:CovidCats",
        "label": "_owner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 380,
        "contract": "contracts/CovidCats.sol:CovidCats",
        "label": "_status",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2348,
        "contract": "contracts/CovidCats.sol:CovidCats",
        "label": "_tokenSupply",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(Counter)2013_storage"
      },
      {
        "astId": 2357,
        "contract": "contracts/CovidCats.sol:CovidCats",
        "label": "saleIsActive",
        "offset": 0,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 2361,
        "contract": "contracts/CovidCats.sol:CovidCats",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2363,
        "contract": "contracts/CovidCats.sol:CovidCats",
        "label": "_baseTokenURI",
        "offset": 0,
        "slot": "12",
        "type": "t_string_storage"
      },
      {
        "astId": 2375,
        "contract": "contracts/CovidCats.sol:CovidCats",
        "label": "keyHash",
        "offset": 0,
        "slot": "13",
        "type": "t_bytes32"
      },
      {
        "astId": 2377,
        "contract": "contracts/CovidCats.sol:CovidCats",
        "label": "fee",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 2381,
        "contract": "contracts/CovidCats.sol:CovidCats",
        "label": "requestToSender",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 2385,
        "contract": "contracts/CovidCats.sol:CovidCats",
        "label": "isClaiming",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2388,
        "contract": "contracts/CovidCats.sol:CovidCats",
        "label": "LINK_token",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(IERC20)487"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)487": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2013_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2012,
            "contract": "contracts/CovidCats.sol:CovidCats",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}